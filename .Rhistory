system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
EulerMultTraj<-function(T=100, N=10, start, delta=0.1 ,sigma=0.1, mu=0.1, NbTraj=100, NbCPU=2, ClockTime=FALSE)
{
# Start the clock!
if(ClockTime==TRUE) ptm <- proc.time()
##Core function optimized for parallel computing
euler<-function(T=100, N=10, start, delta=0.1 ,sigma=0.1, mu=0.1){
##constructing times
delta.time<-T/N
times<-matrix(data = seq(from = 0,by = delta.time,length.out = N), nrow = 1, ncol = N)
##Initialisation of compartments
nbCompartments<-length(start)
##initialization of the output
out<-matrix(nrow = length(times), ncol = nbCompartments+1)
out[1,]<-c(0,start)
##sigma to matrix
if(is.matrix(sigma)) sigma.mat<-sigma else sigma.mat<-matrix(data = sigma,nrow = nbCompartments, ncol = nbCompartments)
##loop over time
for(i in seq_len(length(times[1,])-1)){
##Generating noise increments
gam<-apply(X = sigma.mat,MARGIN = c(1,2),FUN = function(x) rgamma(n = 1,scale =x^2 ,shape = delta/x^2))
##generate probabilities & increments
#initialization
proba<-matrix(nrow = nbCompartments, ncol = nbCompartments)
var.N<-matrix(nrow = nbCompartments, ncol = nbCompartments)
##Probabilities
proba<-(1-exp(-rowSums(mu * gam)))*(mu * gam)/(rowSums(mu * gam))
##Normalization
diag(proba) <- 1 - rowSums(proba)
##generate process increments
for(c in 1:nbCompartments){
var.N[c,]<-rmultinom(n=1, size = out[i,c+1], prob = proba[c,])
}
out[i+1,-1]<-colSums(var.N)
}
#Output: time and compartments number at each time (# of compartments +1)
out[,1] <- times
return(out)
}
}
EulerMultTraj(T = 100,N=100)
ret <-EulerMultTraj(T = 100,N=100)
ret
source('~/hosp_delay/EM.R')
source('~/hosp_delay/EM.R')
ret
ret <-EulerMultTraj(T = 100000,N=100,start=1)
ret
source('~/hosp_delay/EM.R')
ret <- euler()
ret <- euler(start=10)
ret
source('~/hosp_delay/EM.R')
ret
ret <- euler(start=c(100,1),T=1000)
ret
ret <- euler(start=c(100,1),N=1000)
ret
plot(ret[1,])
plot(ret[,1])
plot(ret[,2])
ret <- euler(start=c(1,0),N=1000)
plot(ret[,2])
ret <- euler(start=c(100,0),N=1000)
plot(ret[,2])
plot(ret[,3])
plot(ret[,2])
ret <- euler(start=c(1,0),N=1000)
plot(ret[,2])
ret <- euler(start=c(100,1,0),N=1000)
plot(ret[,2])
plot(ret[,3])
plot(ret[,1])
dim(ret)
plot(ret[,4])
plot(ret[,2])
plot(ret[,3])
ret <- euler(start=c(100,1,0),N=100)
plot(ret[,3])
ret <- euler(start=c(100,1,0),N=100,T=500)
plot(ret[,3])
ret <- euler(start=c(100,1,0),N=100,T=1000)
plot(ret[,3])
plot(ret[,4])
ret <- euler(start=c(100,1,0),N=1000,T=1000)
plot(ret[,4])
plot(ret[,3])
ret <- euler(start=c(100,1,0),N=10000,T=1000)
plot(ret[,3])
plot(ret[,4])
ret <- euler(start=c(100,1,0),N=100,T=100)
plot(ret[,4])
plot(ret[,3])
ret <- euler(start=c(100,10,0),N=100,T=100)
plot(ret[,3])
plot(ret[,4])
plot(ret[,3])
plot(ret[,2])
plot(ret[,3])
ret <- euler(start=c(100,10,0),N=100,T=100,delta = .01)
plot(ret[,3])
ret <- euler(start=c(100,10,0),N=100,T=100,delta = 1)
plot(ret[,3])
ret <- euler(start=c(100,10,0),N=200,T=200,delta = 1)
plot(ret[,3])
ret <- euler(start=c(100,20,0),N=200,T=200,delta = 1)
plot(ret[,3])
ret <- euler(start=c(100,20,0),N=200,T=200,delta = .01)
plot(ret[,3])
ret <- euler(start=c(100,20),N=200,T=200,delta = .01)
plot(ret[,3])
plot(ret[,2])
plot(ret[,3])
plot(ret[,4])
ret <- euler(start=c(100,20),N=200,T=200,delta = 1)
plot(ret[,3])
ret <- euler(start=c(1000,20),N=200,T=200,delta = 1)
plot(ret[,3])
ret <- euler(start=c(1000,20),N=200,T=400,delta = 1)
plot(ret[,3])
ret <- euler(start=c(1000,20),N=200,T=1000,delta = 1)
plot(ret[,3])
ret <- euler(start=c(1000,20),N=400,T=200,delta = 1)
plot(ret[,3])
ret <- euler(start=c(1000,20),N=1000,T=200,delta = 1)
plot(ret[,3])
ret <- euler(start=c(1000,20),N=1000,T=200,delta = .001)
ret <- euler(start=c(1000,20),N=1000,T=200,delta = .001)
plot(ret[,3])
ret <- euler(start=c(1000,20),N=1000,T=200,delta = 100)
plot(ret[,3])
ret <- euler(start=c(1000,20),N=1000,T=200,delta = 1)
plot(ret[,3])
ret <- euler(start=c(1000,20),N=1000,T=200,delta = .1)
plot(ret[,3])
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
8*10^6
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
system("python gill.py")
library(deSolve)
## Create an SIR function
sir <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -beta * S * I
dI <-  beta * S * I - gamma * I
dR <-                 gamma * I
return(list(c(dS, dI, dR)))
})
}
### Set parameters
## Proportion in each compartment: Susceptible 0.999999, Infected 0.000001, Recovered 0
init       <- c(S = 1-1e-6, I = 1e-6, R = 0.0)
## beta: infection parameter; gamma: recovery parameter
parameters <- c(beta = 1.4247, gamma = 0.14286)
## Time frame
times      <- seq(0, 70, by = 1)
## Solve using ode (General Solver for Ordinary Differential Equations)
out <- ode(y = init, times = times, func = sir, parms = parameters)
## change to data frame
out <- as.data.frame(out)
## Delete time variable
out$time <- NULL
## Show data
head(out, 10)
plot(out$I)
source('~/hosp_delay/sir_test.R')
source('~/hosp_delay/sir_test.R')
source('~/hosp_delay/sir_test.R')
plot(out$I,type='l')
source('~/hosp_delay/sir_test.R')
plot(out$I,type='l')
source('~/hosp_delay/sir_test.R')
source('~/hosp_delay/sir_test.R')
source('~/hosp_delay/sir_test.R')
source('~/hosp_delay/sir_test.R')
source('~/hosp_delay/sir_test.R')
source('~/hosp_delay/sir_test.R')
source('~/hosp_delay/sir_test.R')
source('~/hosp_delay/sir_test.R')
source('~/hosp_delay/sir_test.R')
source('~/hosp_delay/sir_test.R')
source('~/hosp_delay/sir_test.R')
source('~/hosp_delay/sir_test.R')
source('~/hosp_delay/sir_test.R')
source('~/hosp_delay/sir_test.R')
source('~/hosp_delay/sir_test.R')
source('~/hosp_delay/sir_test.R')
source('~/hosp_delay/sir_test.R')
source('~/hosp_delay/sir_test.R')
source('~/hosp_delay/sir_test.R')
.001*10^6
source('~/hosp_delay/sir_test.R')
source('~/hosp_delay/sir_test.R')
source('~/hosp_delay/sir_test.R')
source('~/hosp_delay/sir_test.R')
source('~/hosp_delay/sir_test.R')
source('~/hosp_delay/sir_test.R')
source('~/hosp_delay/sir_test.R')
source('~/hosp_delay/sir_test.R')
library(deSolve)
## Create an SIR function
seir <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -beta * S * I
dE <-  beta * S * I - sigma * E
dI <- sigma*E - gamma*I
dR <-   gamma * I
return(list(c(dS,dE, dI, dR)))
})
}
### Set parameters
## Proportion in each compartment: Susceptible 0.999999, Infected 0.000001, Recovered 0
init       <- c(S = 1-1e-6, E=0,I = 1e-6, R = 0.0)
## beta: infection parameter; gamma: recovery parameter
parameters <- c(beta = .95, gamma = 1/3.5,sigma=1/3.7)
## Time frame
times      <- seq(0, 100, by = 1)
## Solve using ode (General Solver for Ordinary Differential Equations)
out <- ode(y = init, times = times, func = seir, parms = parameters)
## change to data frame
out <- as.data.frame(out)
plot(out$I,type='l',ylab='Percent Infected',xlab='Time in Days')
library(dplyr)
library(cowplot)
state_testing_data <- read.csv("/Users/gcgibson/Downloads/states-daily.csv")
state_testing_data$date_formatted <- as.Date(state_testing_data$dateChecked)
state_testing_data$date_formatted <- unlist(lapply(state_testing_data$date,function(x){
year <- substr(x,1,4)
month <- substr(x,5,6)
day <- substr(x,7,8)
return (paste0(year,"/",month,"/",day))
}))
state_testing_data$date_formatted <- as.Date(state_testing_data$date_formatted)
state_testing_data$week <- lubridate::week(state_testing_data$date_formatted)
state_testing_data_by_week <- state_testing_data %>% group_by(week,state) %>% summarise(week_positive = sum(positive,na.rm=T))
state_testing_data <- state_testing_data %>% arrange(state_testing_data$date_formatted)
state_testing_data_ny <- state_testing_data[state_testing_data$state=="NY",]
# For stan model we need the following variables:
state_testing_data_ny$death[is.na(state_testing_data_ny$death)] <- 0
# subset to last 20 rows
nrow_df <- nrow(state_testing_data_ny)
state_testing_data_ny_subset <- state_testing_data_ny[tail(1:nrow_df,20),]
plot(state_testing_data_ny_subset$date_formatted,state_testing_data_ny_subset$positive,type='l',ylab="Confirmed Cases in NY",xlab="Date")
library(reticulate)
library(openintro)
library(ggplot2)
use_python("/usr/local/bin/python3")
source_python("gill.py")
source_python("gill.py")
census_2010 <- read.csv("/Users/gcgibson/census_2010.csv")
census_2010$ab <- c(state2abbr(census_2010$state),"NYC")
run_model_for_location <- function(location,pop){
data_for_plot_py = run_sim_location(location,pop)
data_for_plot_unlist <- unlist(data_for_plot_py)
data_for_plot <-matrix(data_for_plot_unlist,ncol=115,byrow = T)
data_for_plot <- data_for_plot[1:1000,]
data_for_plot_df <- data.frame(x=rep(1:ncol(data_for_plot),1000),y=c(t(data_for_plot)),group=rep(1:1000,each=ncol(data_for_plot)))
forecast_plot <- ggplot(data_for_plot_df,aes(x=x,y=y,group=group)) + geom_line(alpha=.1) + theme_bw() + geom_line(data=data.frame(x=1:length(state_testing_data_ny_subset$positive),y=state_testing_data_ny_subset$positive),aes(x=x,y=y,group=1,col='observed'))  + xlab("Days from March 1st") + ylab("Cumulative Count")
return (forecast_plot)
}
ggplots <- list()
ggplot_counter <- 1
locations <- c("NY","OH","MA")
for (location in locations){
pop <- census_2010[census_2010$ab==location,]$year_2010[1]
ggplots[[ggplot_counter]] <- run_model_for_location(location,pop)
ggplot_counter <- ggplot_counter+1
}
library(deSolve)
## Create an SIR function
seir <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -beta * S * I
dE <-  beta * S * I - sigma * E
dI <- sigma*E - gamma*I
dR <-   gamma * I
return(list(c(dS,dE, dI, dR)))
})
}
### Set parameters
## Proportion in each compartment: Susceptible 0.999999, Infected 0.000001, Recovered 0
init       <- c(S = 1-1e-6, E=0,I = 1e-6, R = 0.0)
## beta: infection parameter; gamma: recovery parameter
parameters <- c(beta = .95, gamma = 1/3.5,sigma=1/3.7)
## Time frame
times      <- seq(0, 100, by = 1)
## Solve using ode (General Solver for Ordinary Differential Equations)
out <- ode(y = init, times = times, func = seir, parms = parameters)
## change to data frame
out <- as.data.frame(out)
plot(out$I,type='l',ylab='Percent Infected',xlab='Time in Days')
library(dplyr)
library(cowplot)
state_testing_data <- read.csv("/Users/gcgibson/Downloads/states-daily.csv")
state_testing_data$date_formatted <- as.Date(state_testing_data$dateChecked)
state_testing_data$date_formatted <- unlist(lapply(state_testing_data$date,function(x){
year <- substr(x,1,4)
month <- substr(x,5,6)
day <- substr(x,7,8)
return (paste0(year,"/",month,"/",day))
}))
state_testing_data$date_formatted <- as.Date(state_testing_data$date_formatted)
state_testing_data$week <- lubridate::week(state_testing_data$date_formatted)
state_testing_data_by_week <- state_testing_data %>% group_by(week,state) %>% summarise(week_positive = sum(positive,na.rm=T))
state_testing_data <- state_testing_data %>% arrange(state_testing_data$date_formatted)
state_testing_data_ny <- state_testing_data[state_testing_data$state=="NY",]
# For stan model we need the following variables:
state_testing_data_ny$death[is.na(state_testing_data_ny$death)] <- 0
# subset to last 20 rows
nrow_df <- nrow(state_testing_data_ny)
state_testing_data_ny_subset <- state_testing_data_ny[tail(1:nrow_df,20),]
plot(state_testing_data_ny_subset$date_formatted,state_testing_data_ny_subset$positive,type='l',ylab="Confirmed Cases in NY",xlab="Date")
library(reticulate)
library(openintro)
library(ggplot2)
use_python("/usr/local/bin/python3")
source_python("gill.py")
census_2010 <- read.csv("/Users/gcgibson/census_2010.csv")
census_2010$ab <- c(state2abbr(census_2010$state),"NYC")
run_model_for_location <- function(location,pop){
data_for_plot_py = run_sim_location(location,pop)
data_for_plot_unlist <- unlist(data_for_plot_py)
data_for_plot <-matrix(data_for_plot_unlist,ncol=115,byrow = T)
data_for_plot <- data_for_plot[1:1000,]
data_for_plot_df <- data.frame(x=rep(1:ncol(data_for_plot),1000),y=c(t(data_for_plot)),group=rep(1:1000,each=ncol(data_for_plot)))
forecast_plot <- ggplot(data_for_plot_df,aes(x=x,y=y,group=group)) + geom_line(alpha=.1) + theme_bw() + geom_line(data=data.frame(x=1:length(state_testing_data_ny_subset$positive),y=state_testing_data_ny_subset$positive),aes(x=x,y=y,group=1,col='observed'))  + xlab("Days from March 1st") + ylab("Cumulative Count")
return (forecast_plot)
}
ggplots <- list()
ggplot_counter <- 1
locations <- c("NY","OH","MA")
for (location in locations){
pop <- census_2010[census_2010$ab==location,]$year_2010[1]
ggplots[[ggplot_counter]] <- run_model_for_location(location,pop)
ggplot_counter <- ggplot_counter+1
}
location_idx <- 1
for (location in locations){
print (location)
print(ggplots[[location_idx]])
location_idx <- location_idx + 1
}
state_testing_data
forecast_plot <- ggplot(data_for_plot_df,aes(x=x,y=y,group=group)) + geom_line(alpha=.1) + theme_bw() + geom_line(data=data.frame(x=1:length(state_testing_data[state_testing_data$state==location,]$positive),y=state_testing_data[state_testing_data$state==location,]$positive),aes(x=x,y=y,group=1,col='observed'))  + xlab("Days from March 1st") + ylab("Cumulative Count")
library(reticulate)
library(openintro)
library(ggplot2)
use_python("/usr/local/bin/python3")
source_python("gill.py")
census_2010 <- read.csv("/Users/gcgibson/census_2010.csv")
census_2010$ab <- c(state2abbr(census_2010$state),"NYC")
run_model_for_location <- function(location,pop){
data_for_plot_py = run_sim_location(location,pop)
data_for_plot_unlist <- unlist(data_for_plot_py)
data_for_plot <-matrix(data_for_plot_unlist,ncol=115,byrow = T)
data_for_plot <- data_for_plot[1:1000,]
data_for_plot_df <- data.frame(x=rep(1:ncol(data_for_plot),1000),y=c(t(data_for_plot)),group=rep(1:1000,each=ncol(data_for_plot)))
forecast_plot <- ggplot(data_for_plot_df,aes(x=x,y=y,group=group)) + geom_line(alpha=.1) + theme_bw() + geom_line(data=data.frame(x=1:length(state_testing_data[state_testing_data$state==location,]$positive),y=state_testing_data[state_testing_data$state==location,]$positive),aes(x=x,y=y,group=1,col='observed'))  + xlab("Days from March 1st") + ylab("Cumulative Count")
return (forecast_plot)
}
ggplots <- list()
ggplot_counter <- 1
locations <- c("NY","OH","MA")
for (location in locations){
pop <- census_2010[census_2010$ab==location,]$year_2010[1]
ggplots[[ggplot_counter]] <- run_model_for_location(location,pop)
ggplot_counter <- ggplot_counter+1
}
location <- "OH"
pop <- census_2010[census_2010$ab==location,]$year_2010[1]
pop
llocation
location
data_for_plot_py = run_sim_location(location,pop)
use_python("/usr/local/bin/python3")
source_python("gill.py")
data_for_plot_py = run_sim_location(location,pop)
data_for_plot_py[[1]]
data_for_plot_unlist <- unlist(data_for_plot_py)
data_for_plot <-matrix(data_for_plot_unlist,ncol=91,byrow = T)
data_for_plot[1,]
plot(data_for_plot[1,])
data_for_plot_py = run_sim_location(location,pop)
data_for_plot_unlist <- unlist(data_for_plot_py)
data_for_plot <-matrix(data_for_plot_unlist,ncol=91,byrow = T)
data_for_plot <- data_for_plot[1:1000,]
data_for_plot_df <- data.frame(x=rep(1:ncol(data_for_plot),1000),y=c(t(data_for_plot)),group=rep(1:1000,each=ncol(data_for_plot)))
forecast_plot <- ggplot(data_for_plot_df,aes(x=x,y=y,group=group)) + geom_line(alpha=.1) + theme_bw() + geom_line(data=data.frame(x=1:length(state_testing_data[state_testing_data$state==location,]$positive),y=state_testing_data[state_testing_data$state==location,]$positive),aes(x=x,y=y,group=1,col='observed'))  + xlab("Days from March 1st") + ylab("Num Infections")
forecast_plot
data_for_plot
data_for_plot[1,]
plot(data_for_plot[1,])
data_for_plot_df <- data.frame(x=rep(1:ncol(data_for_plot),1000),y=c(t(data_for_plot)),group=rep(1:1000,each=ncol(data_for_plot)))
plot(data_for_plot$y[1:91])
plot(data_for_plot_df$y[1:91])
data_for_plot[2,]
plot(data_for_plot[2,])
plot(data_for_plot[4,])
forecast_plot
data_for_plot_df <- data.frame(x=rep(1:ncol(data_for_plot),1000),y=c((data_for_plot)),group=rep(1:1000,each=ncol(data_for_plot)))
forecast_plot <- ggplot(data_for_plot_df,aes(x=x,y=y,group=group)) + geom_line(alpha=.1) + theme_bw() + geom_line(data=data.frame(x=1:length(state_testing_data[state_testing_data$state==location,]$positive),y=state_testing_data[state_testing_data$state==location,]$positive),aes(x=x,y=y,group=1,col='observed'))  + xlab("Days from March 1st") + ylab("Num Infections")
forecast_plot
data_for_plot_py = run_sim_location(location,pop)
data_for_plot_unlist <- unlist(data_for_plot_py)
data_for_plot <-matrix(data_for_plot_unlist,ncol=91,byrow = T)
data_for_plot <- data_for_plot[1:1000,]
data_for_plot_df <- data.frame(x=rep(1:ncol(data_for_plot),1000),y=c(t(data_for_plot)),group=rep(1:1000,each=ncol(data_for_plot)))
forecast_plot <- ggplot(data_for_plot_df,aes(x=x,y=y,group=group)) + geom_line(alpha=.1) + theme_bw() + geom_line(data=data.frame(x=1:length(state_testing_data[state_testing_data$state==location,]$positive),y=state_testing_data[state_testing_data$state==location,]$positive),aes(x=x,y=y,group=1,col='observed'))  + xlab("Days from March 1st") + ylab("Num Infections")
forecast_plot
location
pop
system("python gill.py")
library(reticulate)
library(openintro)
library(ggplot2)
use_python("/usr/local/bin/python3")
source_python("gill.py")
census_2010 <- read.csv("/Users/gcgibson/census_2010.csv")
census_2010$ab <- c(state2abbr(census_2010$state),"NYC")
data_for_plot_py = run_sim_location(location,pop)
data_for_plot_unlist <- unlist(data_for_plot_py)
data_for_plot <-matrix(data_for_plot_unlist,ncol=91,byrow = T)
data_for_plot <- data_for_plot[1:1000,]
data_for_plot_df <- data.frame(x=rep(1:ncol(data_for_plot),1000),y=c(t(data_for_plot)),group=rep(1:1000,each=ncol(data_for_plot)))
forecast_plot <- ggplot(data_for_plot_df,aes(x=x,y=y,group=group)) + geom_line(alpha=.1) + theme_bw() + geom_line(data=data.frame(x=1:length(state_testing_data[state_testing_data$state==location,]$positive),y=state_testing_data[state_testing_data$state==location,]$positive),aes(x=x,y=y,group=1,col='observed'))  + xlab("Days from March 1st") + ylab("Num Infections")
return (forecast_plot)
forecast_plot
plot(data_for_plot[1,])
plot(data_for_plot[100,])
plot(data_for_plot[101,])
plot(data_for_plot[120,])
plot(data_for_plot[50,])
plot(data_for_plot[700,])
data_for_plot <-matrix(data_for_plot_unlist,ncol=91,byrow = F)
data_for_plot[1,]
plot(data_for_plot[1,])
plot(data_for_plot[100,])
plot(data_for_plot[700,])
plot(data_for_plot[800,])
data_for_plot_py = run_sim_location(location,pop)
data_for_plot_unlist <- unlist(data_for_plot_py)
data_for_plot <-matrix(data_for_plot_unlist,ncol=95,byrow = F)
data_for_plot <- data_for_plot[1:1000,]
data_for_plot_df <- data.frame(x=rep(1:ncol(data_for_plot),1000),y=c(t(data_for_plot)),group=rep(1:1000,each=ncol(data_for_plot)))
forecast_plot <- ggplot(data_for_plot_df,aes(x=x,y=y,group=group)) + geom_line(alpha=.1) + theme_bw() + geom_line(data=data.frame(x=1:length(state_testing_data[state_testing_data$state==location,]$positive),y=state_testing_data[state_testing_data$state==location,]$positive),aes(x=x,y=y,group=1,col='observed'))  + xlab("Days from March 1st") + ylab("Num Infections")
forecast_plot
data_for_plot <-matrix(data_for_plot_unlist,ncol=95,byrow = T)
data_for_plot <- data_for_plot[1:1000,]
data_for_plot_df <- data.frame(x=rep(1:ncol(data_for_plot),1000),y=c(t(data_for_plot)),group=rep(1:1000,each=ncol(data_for_plot)))
forecast_plot <- ggplot(data_for_plot_df,aes(x=x,y=y,group=group)) + geom_line(alpha=.1) + theme_bw() + geom_line(data=data.frame(x=1:length(state_testing_data[state_testing_data$state==location,]$positive),y=state_testing_data[state_testing_data$state==location,]$positive),aes(x=x,y=y,group=1,col='observed'))  + xlab("Days from March 1st") + ylab("Num Infections")
forecast_plot
locations <- sample(unique(state_testing_data$state),1)
locations <- sample(unique(state_testing_data$state),10)
locations
